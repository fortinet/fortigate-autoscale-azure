name: >-
  Publish a dev release (prerelease) on a selected branch.

on:
  # Run by manual trigger
  workflow_dispatch:
    inputs:
      base-branch:
        description: >-
          The base branch to base a new branch for dev release.
        required: true
      custom-version:
        description: >-
          The custom version to be used for branch, tag, and release. Do not use an existing tag in the repo.
        required: true
      name-prefix:
        description: >-
          The branch name prefix. Default: devrel_
        required: false
        default: devrel_
      no-publish:
        description: >-
          Boolean indicator to skip the publication steps.
        required: true
        default: 'false'
jobs:
  main_job:
    runs-on: ubuntu-latest
    name: main job
    steps:
      - name: preparation
        run: |
          echo "name-prefix=${{ github.event.inputs['name-prefix'] && 'devrel_' || github.event.inputs['name-prefix'] }}" >> $GITHUB_ENV
      - name: create release branch
        id: create-branch
        uses: fortinet/github-action-version-branch@1.0.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          base-branch: ${{ github.event.inputs['base-branch'] }}
          name-prefix: ${{ env['name-prefix'] }}
          custom-version: ${{ github.event.inputs['custom-version'] }}
      - name: checkout dev release branch
        uses: actions/checkout@v2
        with:
          # set ref to the head branch (newly created) from the output of step: create-branch
          ref: ${{ steps['create-branch'].outputs['head-branch'] }}
      # configure the commit author for the version bump commit
      # use the github-bot account
      - name: config commit author (bot)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      # install all dependencies
      - name: install project dependencies
        run: npm ci
      # build to compile the source code
      - name: build project
        run: npm run build
      # bump version by running `npm version`
      - name: bump version
        id: bump-version
        # use the head version from the output of step: create-branch
        # use allow-same-version option
        run: |
          npm config set sign-git-tag false
          npm config set sign-git-commit false
          npm version ${{ steps['create-branch'].outputs['head-version'] }} --no-git-tag-version
          git add -u
          git commit -m "dev release: ${{ steps['create-branch'].outputs['head-version'] }}" --no-gpg-sign
      - name: push changes
        id: push-changes
        # push commits only. Even though a tag is created, it will not be pushed.
        run: |
          git push
          echo "::set-output name=tag-commit::$(git rev-parse HEAD)"
      # prepare release assets
      - name: make dist
        if: ${{ github.event.inputs['no-publish'] != 'true'  }}
        run: npm run make-dist
      # create a release
      - id: create-release
        name: create release
        if: ${{ github.event.inputs['no-publish'] != 'true'  }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps['create-branch'].outputs['head-version'] }} # Use the head version from the output of the `create-branch` step
          release_name: "dev release: ${{ steps['create-branch'].outputs['head-version'] }}" # Use the head version from the output of the `create-branch` step
          draft: false
          prerelease: ${{ steps['create-branch'].outputs['is-prerelease'] == 'true' }} # Use the output from the `create-branch` step
          commitish: ${{ steps['push-changes'].outputs['tag-commit'] }} # Use the output: `tag-commit` from a prev step
      - id: upload-release-asset
        name: upload release assets
        if: ${{ github.event.inputs['no-publish'] != 'true'  }}
        uses: svenstaro/upload-release-action@2.2.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps['create-branch'].outputs['head-version'] }} # Use the output from the `create-branch` step
          prerelease: ${{ steps['create-branch'].outputs['is-prerelease'] == 'true' }} # Use the output from the `create-branch` step
          file: ./fortigate-autoscale-azure*.zip
          file_glob: true
          overwrite: true
      - id: delete-devrel-branch
        name: delete devrel branch
        if: ${{ github.event.inputs['no-publish'] != 'true'  }}
        run: git push -d origin $(git branch --show-current)