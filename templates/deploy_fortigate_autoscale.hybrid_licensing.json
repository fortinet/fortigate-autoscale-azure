{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "3.3.2.0",
    "parameters": {
        "AccessRestrictionIPRange": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Specify IP ranges (single IPv4 address or CIDR range) to allow access from the Internet or from your on-premises network to the CosmosDB and Function App. Specify at least one entry for security purposes. For multiple entries, each entry must be separated by a comma and no trailing comma is allowed. **WARNING!** 0.0.0.0/0 accepts connections from any IP address. We recommend that you use a constrained CIDR range to reduce the potential of inbound attacks from unknown IP addresses."
            }
        },
        "AdminPassword": {
            "type": "SecureString",
            "metadata": {
                "description": "FortiGate administrator password on all VMs as well as the FortiAnalyzer if FortiAnalyzer integration is enabled. Must be between 11 and 26 characters and must include at least one uppercase letter, one lowercase letter, one digit, and one special character such as (! @ # $ %)."
            }
        },
        "AdminUsername": {
            "defaultValue": "azureadmin",
            "type": "String",
            "metadata": {
                "description": "FortiGate administrator username on all VMs as well as the FortiAnalyzer if FortiAnalyzer integration is enabled."
            }
        },
        "BYOLInstanceCount": {
            "defaultValue": 2,
            "minValue": 0,
            "type": "Int",
            "metadata": {
                "description": "The number of FortiGate instances the BYOL VMSS should have at any time. For High Availability in BYOL-only and Hybrid use cases, ensure at least 2 FortiGates are in the group. For specific use cases, set to 0 for PAYG-only, and >= 2 for BYOL-only or hybrid licensing."
            }
        },
        "FortiAnalyzerAutoscaleAdminPassword": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "Password for the 'FortiAnalyzer Autoscale Admin Username'. The password must conform to the FortiAnalyzer password policy and have a minimum length of 8 and a maximum length of 128. If you need to enable KMS encryption, refer to the documentation."
            }
        },
        "FortiAnalyzerAutoscaleAdminUsername": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "The name of the secondary administrator-level account in the FortiAnalyzer, which FortiGate Autoscale uses to connect to the FortiAnalyzer to authorize any FortiGate device in the Auto Scaling group. To conform to the FortiAnalyzer naming policy, the user name can only contain numbers, lowercase letters, uppercase letters, and hyphens. It cannot start or end with a hyphen (-)."
            }
        },
        "FortiAnalyzerCustomPrivateIPAddress": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "The custom private IP address to be used by the FortiAnalyzer. Must be within the Public subnet 1 CIDR range. Required if 'FortiAnalyzer Integration Options' is set to 'yes'. If 'FortiAnalyzer Integration Options' is set to 'no', any input will be ignored."
            }
        },
        "FortiAnalyzerInstanceType": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Size of the FortiAnalyzer-VM. Not all instance types are supported. Review the documentation prior to selecting an instance."
            }
        },
        "FortiAnalyzerIntegrationOptions": {
            "defaultValue": "yes",
            "allowedValues": ["yes", "no"],
            "type": "String",
            "metadata": {
                "description": "Choose 'yes' to incorporate FortiAnalyzer into FortiGate Autoscale for Azure to use extended features that include storing logs into FortiAnalyzer."
            }
        },
        "FortiAnalyzerPublicIPAddressID": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "ID of the Public IP address to associate with the FortiAnalyer. When provided, it will be used associat with the FortiAnalyzer. If the parameter is left empty, a new public IP address will be allocated in the resource group that contains the FortiAnalyzer."
            }
        },
        "FortiAnalyzerVersion": {
            "defaultValue": "6.4.5",
            "allowedValues": ["6.4.5", "6.2.5"],
            "type": "String",
            "metadata": {
                "description": "FortiAnalyzer version supported by FortiGate Autoscale for Azure."
            }
        },
        "FortiGatePSKSecret": {
            "type": "SecureString",
            "metadata": {
                "description": "The secret key used by FortiGate instances to securely communicate with each other. Must contain numbers and letters and may contain special characters. Maximum length is 128."
            }
        },
        "FOSVersion": {
            "defaultValue": "6.4.5",
            "allowedValues": ["6.4.5"],
            "type": "String",
            "metadata": {
                "description": "FortiOS version supported by FortiGate Autoscale for Azure."
            }
        },
        "FrontendIPAddressID": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "ID of the Frontend Public IP address. When provided, it will be used as the frontend IP address associated with the external load balancer. If the parameter is left empty, a new public IP address will be allocated in the resource group that contains the virtual network components."
            }
        },
        "HeartBeatDelayAllowance": {
            "defaultValue": 30,
            "minValue": 30,
            "type": "Int",
            "metadata": {
                "description": "The maximum amount of time (in seconds) allowed for network latency of the FortiGate heartbeat arriving at the Autoscale handler function. Minimum is 30."
            }
        },
        "HeartBeatInterval": {
            "defaultValue": 60,
            "minValue": 30,
            "maxValue": 120,
            "type": "Int",
            "metadata": {
                "description": "The length of time (in seconds) that the FortiGate waits between sending heartbeat requests to the Autoscale handler function. Minimum is 30. Maximum is 120."
            }
        },
        "HeartBeatLossCount": {
            "defaultValue": 10,
            "minValue": 3,
            "type": "Int",
            "metadata": {
                "description": "Number of consecutively lost heartbeats. When the Heart Beat Loss Count has been reached, the VM is deemed unhealthy and failover activities will commence."
            }
        },
        "InstanceType": {
            "defaultValue": "Standard_F4",
            "allowedValues": ["Standard_F4s_v2", "Standard_F4s", "Standard_F4"],
            "type": "String",
            "metadata": {
                "description": "Size of the VMs in the VMSS."
            }
        },
        "MaxBYOLInstanceCount": {
            "defaultValue": 2,
            "minValue": 0,
            "type": "Int",
            "metadata": {
                "description": "Maximum number of FortiGate instances in the BYOL VMSS. For specific use cases, set to 0 for PAYG-only, and >= 2 for BYOL-only or hybrid licensing. This number must be greater than or equal to the 'Min BYOL Instance Count'."
            }
        },
        "MaxPAYGInstanceCount": {
            "defaultValue": 6,
            "minValue": 0,
            "type": "Int",
            "metadata": {
                "description": "Maximum number of FortiGate instances in the PAYG VMSS. For specific use cases, set to 0 for BYOL-only, >= 2 for PAYG-only, and >= 0 for hybrid licensing. This number must be greater than or equal to the 'Min PAYG Instance Count'."
            }
        },
        "MinBYOLInstanceCount": {
            "defaultValue": 2,
            "minValue": 0,
            "type": "Int",
            "metadata": {
                "description": "Minimum number of FortiGate instances in the BYOL VMSS. For specific use cases, set to 0 for PAYG-only, and >= 2 for BYOL-only or hybrid licensing."
            }
        },
        "MinPAYGInstanceCount": {
            "defaultValue": 0,
            "minValue": 0,
            "type": "Int",
            "metadata": {
                "description": "Minimum number of FortiGate instances in the PAYG VMSS. For specific use cases, set to 0 for BYOL-only, >= 2 for PAYG-only, and >= 0 for hybrid licensing."
            }
        },
        "PAYGInstanceCount": {
            "defaultValue": 0,
            "minValue": 0,
            "type": "Int",
            "metadata": {
                "description": "The number of FortiGate instances the PAYG VMSS should have at any time. For High Availability in a PAYG-only use case, ensure at least 2 FortiGates are in the group. For specific use cases, set to 0 for BYOL-only, >= 2 for PAYG-only, and >= 0 for hybrid licensing."
            }
        },
        "PackageResURL": {
            "type": "String",
            "defaultValue": "",
            "metadata": {
                "description": "The public URL of the function source file named fortigate-autoscale-azure-funcapp.zip, and can be found inside fortigate-autoscale-azure-template-deployment.zip. The public URL of the deployment package zip file that contains the resource used to deploy the Function App. This URL must be accessible by Azure. The default URL points to the GitHub release corresponding to this ARM template contentVersion."
            }
        },
        "PrimaryElectionTimeout": {
            "defaultValue": 600,
            "type": "Int",
            "metadata": {
                "description": "The maximum time (in seconds) to wait for the election of the primary instance to complete."
            }
        },
        "ResourceNamePrefix": {
            "maxLength": 10,
            "type": "String",
            "metadata": {
                "description": "The prefix for all applicable resource names. Can only contain lowercase letters and numbers. Maximum length is 10."
            }
        },
        "ScaleInThreshold": {
            "defaultValue": 20,
            "type": "Int",
            "metadata": {
                "description": "Percentage of CPU utilization at which scale-in should occur."
            }
        },
        "ScaleOutThreshold": {
            "defaultValue": 80,
            "type": "Int",
            "metadata": {
                "description": "Percentage of CPU utilization at which scale-out should occur."
            }
        },
        "ServicePlanTier": {
            "defaultValue": "Premium (P1V2)",
            "allowedValues": ["Premium (P1V2)", "Free (for demo only)"],
            "type": "String",
            "metadata": {
                "description": "The pricing tier for the function service plan. Note: The Free plan is for trial and demo use only. Do not use it in a production environment."
            }
        },
        "ServicePrincipalAppID": {
            "type": "securestring",
            "metadata": {
                "description": "Application ID for the Registered app used as the Autoscale Function App API request service principal. This is under Azure Active Directory > App registrations > {your app}."
            }
        },
        "ServicePrincipalAppSecret": {
            "type": "securestring",
            "metadata": {
                "description": "Password (Authentication key) for the Registered app used as the Autoscale Function App API request service principal."
            }
        },
        "ServicePrincipalObjectID": {
            "type": "securestring",
            "metadata": {
                "description": "Object ID for the Registered app used as Autoscale Function App API request service principal. This is under Azure Active Directory > App registrations > {your app}."
            }
        },
        "StorageAccountType": {
            "defaultValue": "Standard_LRS",
            "allowedValues": ["Standard_LRS", "Standard_GRS", "Standard_RAGRS"],
            "type": "String",
            "metadata": {
                "description": "Storage account type."
            }
        },
        "Subnet1AddressRange": {
            "type": "String",
            "metadata": {
                "description": "Defines the subnet 1 address range in CIDR notation. The address range must be contained by the address space of the virtual network as defined in 'VNet Address Space'. After deployment, the address range of a subnet which is in use can't be edited. Required when using an existing VNet; value should match the address range of the target VNet. When creating a new VNet, any input value will be ignored."
            }
        },
        "Subnet1Name": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Name of subnet 1, the subnet in which to deploy the FortiGate VMSS. Required when using an existing VNet; the value should match the subnet of the target VNet. When creating a new VNet, any input value will be ignored."
            }
        },
        "Subnet2AddressRange": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Defines the subnet 2 address range in CIDR notation. The address range must be contained by the address space of the virtual network as defined in 'VNet Address Space'. After deployment, the address range of a subnet which is in use can't be edited. Required when using an existing VNet; value should match the address range of the target VNet. When creating a new VNet, any input value will be ignored."
            }
        },
        "Subnet2Name": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Name of subnet 2, a subnet to be protected by the FortiGate. Required when using an existing Net; the value should match the subnet of the target VNet. When creating a new VNet, any input value will be ignored."
            }
        },
        "Subnet3AddressRange": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Defines the subnet 3 address range in CIDR notation. The address range must be contained by the address space of the virtual network as defined in 'VNet Address Space'. After deployment, the address range of a subnet which is in use can't be edited. Required when using an existing VNet; value should match the address range of the target VNet. When creating a new VNet, any input value will be ignored."
            }
        },
        "Subnet3Name": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Name of subnet 3, a subnet to be protected by the FortiGate. Required when using an existing VNet; the value should match the subnet of the target VNet. When creating a new VNet, any input value will be ignored."
            }
        },
        "Subnet4AddressRange": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Defines the subnet 4 address range in CIDR notation. The address range must be contained by the address space of the virtual network as defined in 'VNet Address Space'. After deployment, the address range of a subnet which is in use can't be edited. Required when using an existing VNet; value should match the address range of the target VNet. When creating a new VNet, any input value will be ignored."
            }
        },
        "Subnet4Name": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Name of subnet 4, a subnet to be protected by the FortiGate. Required when using an existing VNet; the value should match the subnet of the target VNet. When creating a new VNet, any input value will be ignored."
            }
        },
        "VMSSAvailabilityZones": {
            "defaultValue": [],
            "type": "Array",
            "metadata": {
                "description": "An array of the availability zones the VMSS will be created with. Input format: [1, 2, 3]. Leave it empty to deploy without specifying any availability zone. The template does not validate the input availability zone against the region. Please find the right number of availability zones of regions from: https://docs.microsoft.com/en-us/azure/availability-zones/az-region"
            }
        },
        "VMSSPlacementGroups": {
            "allowedValues": ["single", "multiple"],
            "defaultValue": "single",
            "type": "String",
            "metadata": {
                "description": "The VMSS placement group options. For mor information, please see: https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-use-availability-zones#placement-groups"
            }
        },
        "VMSSZoneBalance": {
            "allowedValues": [true, false],
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "The VMSS zone balance options if 'VMSSAvailabilityZones' is provided. For mor information, please see: https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-use-availability-zones#zone-balancing"
            }
        },
        "VnetAddressSpace": {
            "type": "String",
            "metadata": {
                "description": "IP address space of the VNet in CIDR notation. E.g. 10.0.0.0/16. Required when using an existing VNet; the value should match the address space of the target VNet."
            }
        },
        "VnetDeploymentMethod": {
            "defaultValue": "create new",
            "allowedValues": ["create new", "use existing"],
            "type": "String",
            "metadata": {
                "description": "Options for Virtual Network (VNet) deployment. Note: The VNet resource group (specified in the 'VNet Resource Group Name' parameter) must be in the same region as the Autoscale resource group (specified in the 'Resource group' parameter). For requirements when using an existing VNet, refer to the documentation."
            }
        },
        "VnetName": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Name of the Azure VNet to connect to FortiGate Autoscale. Required when using an existing VNet. When creating a new VNet, this parameter can be left empty and a name will be generated."
            }
        },
        "VnetResourceGroupName": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Name of the resource group that contains the VNet and related network components. Required if the VNet is not in the Autoscale resource group (specified in the parameter 'Resource group'). If not specified, the Autoscale resource group will be used. For details refer to the description for the parameter 'VNet Deployment Method'. This resource group must be in the same region as the Autoscale resource group."
            }
        }
    },
    "variables": {
        "adminPortNumber": 8443,
        "autoscaleAssetContainerName": "fortigate-autoscale",
        "cmdDeleteDatabaseAccount": "[concat('az cosmosdb delete -y -g ', resourceGroup().name, ' -n ', variables('databaseAccountName'), ';')]",
        "cmdDeleteKeyVault": "[concat('az keyvault delete -g ', resourceGroup().name,' -n ', variables('keyVaultName'), ';')]",
        "cmdDeleteStorageAccount": "[concat('az storage account delete -y -g ', resourceGroup().name, ' -n ', variables('storageAccountName'), ';')]",
        "databaseAccountName": "[concat(toLower(variables('uniqueResourceNamePrefix')),'dba001')]",
        "databaseName": "FortiGateAutoscale",
        "databaseSharedThroughput": "[add(add(variables('databaseSharedThroughputBase'), if(variables('enableHybridLicensing'), 200, 0)), if(variables('enableFortiAnalyzer'), 100, 0))]",
        "databaseSharedThroughputBase": 500,
        "enableFortiAnalyzer": "[equals(parameters('FortiAnalyzerIntegrationOptions'), 'yes')]",
        "enableHybridLicensing": true,
        "functionAppName": "[concat(variables('uniqueResourceNamePrefix'),'funcapp')]",
        "ifBYOLOnly": "[and(not(equals(parameters('MaxBYOLInstanceCount'), 0)), not(equals(parameters('MaxBYOLInstanceCount'), 0)), equals(parameters('MinPAYGInstanceCount'), 0), equals(parameters('MaxPAYGInstanceCount'), 0))]",
        "ifCreateVNet": "[equals(parameters('VnetDeploymentMethod'), 'create new')]",
        "ifCreateVNetInSameRSG": "[and(variables('ifCreateVNet'), or(equals(parameters('VnetResourceGroupName'), ''), equals(parameters('VnetResourceGroupName'), resourceGroup().name)))]",
        "ifPAYGOnly": "[equals(parameters('BYOLInstanceCount'), 0)]",
        "keyVaultName": "[concat(toLower(variables('uniqueResourceNamePrefix')),'kv001')]",
        "licenseFileDirectory": "license-files",
        "licensingModel": "[if(variables('ifPAYGOnly'), 'paygonly', if(variables('ifBYOLOnly'), 'byolonly', 'hybrid'))]",
        "location": "[resourceGroup().location]",
        "storageAccountName": "[concat(toLower(variables('uniqueResourceNamePrefix')),'sta001')]",
        "subnet1Name": "[if(and(variables('ifCreateVNet'), empty(parameters('Subnet1Name'))), concat(variables('vNetName'), '-subnet1'), parameters('Subnet1Name'))]",
        "subnet1": {
            "addressRange": "[if(empty(parameters('Subnet1AddressRange')), '', parameters('Subnet1AddressRange'))]",
            "id": "[concat(variables('vNetId'), '/subnets/', variables('subnet1Name'))]",
            "name": "[variables('subnet1Name')]"
        },
        "subnet2Name": "[if(and(variables('ifCreateVNet'), empty(parameters('Subnet2Name'))), concat(variables('vNetName'), '-subnet2'), parameters('Subnet2Name'))]",
        "subnet2": {
            "addressRange": "[if(empty(parameters('Subnet2AddressRange')), '', parameters('Subnet2AddressRange'))]",
            "id": "[concat(variables('vNetId'), '/subnets/', variables('subnet2Name'))]",
            "name": "[variables('subnet2Name')]"
        },
        "subnet3Name": "[if(and(variables('ifCreateVNet'), empty(parameters('Subnet3Name'))), concat(variables('vNetName'), '-subnet3'), parameters('Subnet3Name'))]",
        "subnet3": {
            "addressRange": "[if(empty(parameters('Subnet3AddressRange')), '', parameters('Subnet3AddressRange'))]",
            "id": "[concat(variables('vNetId'), '/subnets/', variables('subnet3Name'))]",
            "name": "[variables('subnet3Name')]"
        },
        "subnet4Name": "[if(and(variables('ifCreateVNet'), empty(parameters('Subnet4Name'))), concat(variables('vNetName'), '-subnet4'), parameters('Subnet4Name'))]",
        "subnet4": {
            "addressRange": "[if(empty(parameters('Subnet4AddressRange')), '', parameters('Subnet4AddressRange'))]",
            "id": "[concat(variables('vNetId'), '/subnets/', variables('subnet4Name'))]",
            "name": "[variables('subnet4Name')]"
        },
        "subnetIds": {
            "copy": [
                {
                    "name": "subnetIdsCopyIt",
                    "count": "[length(variables('subnets'))]",
                    "input": "[variables('subnets')[copyIndex('subnetIdsCopyIt')].id]"
                }
            ]
        },
        "subnets": "[union(createArray(variables('subnet1')), if(empty(variables('subnet2').addressRange), createArray(), createArray(variables('subnet2'))), if(empty(variables('subnet3').addressRange), createArray(), createArray(variables('subnet3'))), if(empty(variables('subnet4').addressRange), createArray(), createArray(variables('subnet4'))))]",
        "trafficPortNumber": 8443,
        "uniqueId": "[take(uniquestring(resourceGroup().id), 8)]",
        "uniqueResourceNamePrefix": "[concat(parameters('ResourceNamePrefix'), variables('uniqueId'))]",
        "vNetName": "[if(empty(parameters('VnetName')), concat(variables('uniqueResourceNamePrefix'), '-virtual-network'), parameters('VnetName'))]",
        "vNetResourceGroupName": "[if(variables('ifCreateVNetInSameRSG'), resourceGroup().name, parameters('VnetResourceGroupName'))]",
        "vmImgReferenceFazBYOL": {
            "publisher": "fortinet",
            "offer": "fortinet-fortianalyzer",
            "sku": "fortinet-fortianalyzer",
            "version": "[parameters('FortiAnalyzerVersion')]"
        },
        "vmImgReferenceFgtBYOL": {
            "publisher": "fortinet",
            "offer": "fortinet_fortigate-vm_v5",
            "sku": "fortinet_fg-vm",
            "version": "[parameters('FOSVersion')]"
        },
        "vmImgReferenceFgtPAYG": {
            "publisher": "fortinet",
            "offer": "fortinet_fortigate-vm_v5",
            "sku": "fortinet_fg-vm_payg_20190624",
            "version": "[parameters('FOSVersion')]"
        },
        "vmssNameBYOL": "[concat(parameters('ResourceNamePrefix'), 'byol')]",
        "vmssNamePAYG": "[concat(parameters('ResourceNamePrefix'), 'payg')]",
        "vmssNamePrimary": "[if(variables('ifPAYGOnly'), variables('vmssNamePAYG'), variables('vmssNameBYOL'))]",
        "vNetId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('vNetResourceGroupName'), '/providers/Microsoft.Network/virtualNetworks/', variables('vNetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-06-01",
            "name": "[variables('storageAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "[parameters('StorageAccountType')]",
                "tier": "Standard"
            },
            "kind": "Storage"
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[variables('keyVaultName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "enabledForDeployment": false,
                "enabledForDiskEncryption": false,
                "enabledForTemplateDeployment": true,
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": [
                    {
                        "objectId": "[parameters('ServicePrincipalObjectID')]",
                        "tenantId": "[subscription().tenantId]",
                        "permissions": {
                            "keys": ["List", "Get"],
                            "secrets": ["List", "Get"]
                        }
                    }
                ],
                "sku": {
                    "name": "Standard",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[concat(variables('keyVaultName'), '/', 'faz-autoscale-admin-username')]",
            "location": "[resourceGroup().location]",
            "dependsOn": ["[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"],
            "properties": {
                "value": "[parameters('FortiAnalyzerAutoscaleAdminUsername')]"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "name": "[concat(variables('keyVaultName'), '/', 'faz-autoscale-admin-password')]",
            "location": "[resourceGroup().location]",
            "dependsOn": ["[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"],
            "properties": {
                "value": "[parameters('FortiAnalyzerAutoscaleAdminPassword')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
            "apiVersion": "2019-06-01",
            "name": "[concat(variables('storageAccountName'), '/default/', variables('autoscaleAssetContainerName'))]",
            "dependsOn": ["[variables('storageAccountName')]"]
        },
        {
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "apiVersion": "2016-03-31",
            "name": "[variables('databaseAccountName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[variables('databaseAccountName')]",
                "databaseAccountOfferType": "Standard",
                "locations": [
                    {
                        "locationName": "[variables('location')]"
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "CreateDatabase",
            "dependsOn": ["[variables('databaseAccountName')]"],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/fortinet/fortigate-autoscale-azure/main/templates/link_template.database.json"
                },
                "parameters": {
                    "DatabaseAccountName": {
                        "value": "[variables('databaseAccountName')]"
                    },
                    "DatabaseName": {
                        "value": "[variables('databaseName')]"
                    },
                    "SharedThroughput": {
                        "value": "[variables('databaseSharedThroughput')]"
                    },
                    "EnableFortiAnalyzer": {
                        "value": "[if(variables('enableFortiAnalyzer'), 'yes', 'no')]"
                    },
                    "EnableHybridLicensing": {
                        "value": "[if(variables('enableHybridLicensing'), 'yes', 'no')]"
                    }
                }
            },
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroup": "[resourceGroup().name]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "CreateVirtualNetwork",
            "condition": "[variables('ifCreateVNet')]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/fortinet/fortigate-autoscale-azure/main/templates/link_template.vnet.json"
                },
                "parameters": {
                    "Subnets": {
                        "value": "[variables('subnets')]"
                    },
                    "UniqueResourceNamePrefix": {
                        "value": "[variables('uniqueResourceNamePrefix')]"
                    },
                    "VnetAddressSpace": {
                        "value": "[parameters('VnetAddressSpace')]"
                    },
                    "VNetName": {
                        "value": "[variables('vNetName')]"
                    }
                }
            },
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroup": "[variables('vNetResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "dependsOn": ["CreateVirtualNetwork"],
            "name": "UpdateVirtualNetwork",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/fortinet/fortigate-autoscale-azure/main/templates/link_template.vnet.configuration.json"
                },
                "parameters": {
                    "Subnet1AddressRange": {
                        "value": "[parameters('Subnet1AddressRange')]"
                    },
                    "Subnet1Name": {
                        "value": "[parameters('Subnet1Name')]"
                    },
                    "VNetName": {
                        "value": "[variables('vNetName')]"
                    }
                }
            },
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroup": "[variables('vNetResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "dependsOn": ["CreateVirtualNetwork"],
            "name": "CreateLoadBalancers",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/fortinet/fortigate-autoscale-azure/main/templates/link_template.load_balancer.json"
                },
                "parameters": {
                    "ExternalLBFrontendIPId": {
                        "value": "[parameters('FrontendIPAddressID')]"
                    },
                    "ExternalLBInboundSSHPortRange": {
                        "value": "[createArray(29001, 39000)]"
                    },
                    "ExternalLBInboundHTTPSPortRange": {
                        "value": "[createArray(39001, 49000)]"
                    },
                    "ExternalLBRules": {
                        "value": ["Tcp", "80", "80", "Tcp", "443", "443"]
                    },
                    "InternalLBFrontendIPAddress": {
                        "value": ""
                    },
                    "InternalLBFrontendSubnetId": {
                        "value": ""
                    },
                    "UniqueResourceNamePrefix": {
                        "value": "[variables('uniqueResourceNamePrefix')]"
                    }
                }
            },
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroup": "[resourceGroup().name]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "FortiAnalyzerIntegrationResources",
            "condition": "[variables('enableFortiAnalyzer')]",
            "dependsOn": ["CreateVirtualNetwork"],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/fortinet/fortigate-autoscale-azure/main/templates/link_template.faz_integration.json"
                },
                "parameters": {
                    "AdminPassword": {
                        "value": "[parameters('AdminPassword')]"
                    },
                    "AdminUsername": {
                        "value": "[parameters('AdminUsername')]"
                    },
                    "FortiAnalyzerAutoscaleAdminPassword": {
                        "value": "[parameters('FortiAnalyzerAutoscaleAdminPassword')]"
                    },
                    "FortiAnalyzerAutoscaleAdminUsername": {
                        "value": "[parameters('FortiAnalyzerAutoscaleAdminUsername')]"
                    },
                    "FortiAnalyzerCustomPrivateIPAddress": {
                        "value": "[parameters('FortiAnalyzerCustomPrivateIPAddress')]"
                    },
                    "FortiAnalyzerPublicIPAddressID": {
                        "value": "[parameters('FortiAnalyzerPublicIPAddressID')]"
                    },
                    "FortiAnalyzerInstanceType": {
                        "value": "[parameters('FortiAnalyzerInstanceType')]"
                    },
                    "SubnetId": {
                        "value": "[variables('subnet1').id]"
                    },
                    "UniqueResourceNamePrefix": {
                        "value": "[variables('uniqueResourceNamePrefix')]"
                    },
                    "VmImgReferenceFaz": {
                        "value": "[variables('vmImgReferenceFazBYOL')]"
                    }
                }
            },
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroup": "[resourceGroup().name]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "CreateFunctionApp",
            "dependsOn": ["[variables('storageAccountName')]"],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/fortinet/fortigate-autoscale-azure/main/templates/link_template.function_app.json"
                },
                "parameters": {
                    "FunctionAppName": {
                        "value": "[variables('functionAppName')]"
                    },
                    "FunctionExtensionVersion": {
                        "value": "~3"
                    },
                    "NodeJSRuntimeVersion": {
                        "value": "~12"
                    },
                    "PackageResURL": {
                        "value": "[parameters('PackageResURL')]"
                    },
                    "ServicePlanTier": {
                        "value": "[parameters('ServicePlanTier')]"
                    },
                    "StorageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    }
                }
            },
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroup": "[resourceGroup().name]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "CreateVirtualMachineScaleSet",
            "dependsOn": ["CreateVirtualNetwork", "CreateLoadBalancers", "CreateFunctionApp"],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/fortinet/fortigate-autoscale-azure/main/templates/link_template.vmss.json"
                },
                "parameters": {
                    "AdminPassword": {
                        "value": "[parameters('AdminPassword')]"
                    },
                    "AdminUsername": {
                        "value": "[parameters('AdminUsername')]"
                    },
                    "AvailabilityZones": {
                        "value": "[if(empty(parameters('VMSSAvailabilityZones')), createArray(), parameters('VMSSAvailabilityZones'))]"
                    },
                    "BYOLInstanceCount": {
                        "value": "[parameters('BYOLInstanceCount')]"
                    },
                    "ExternalLBBackendAddressPoolIds": {
                        "value": "[reference('CreateLoadBalancers').outputs.externalLBBackendAddressPoolIds.value]"
                    },
                    "ExternalLBInboundNatPoolIds": {
                        "value": "[reference('CreateLoadBalancers').outputs.externalLBInboundNatPoolIds.value]"
                    },
                    "FunctionAppName": {
                        "value": "[variables('functionAppName')]"
                    },
                    "FunctionAppResourceGroupName": {
                        "value": "[resourceGroup().name]"
                    },
                    "FunctionNameFgtAsHandler": {
                        "value": "[reference('CreateFunctionApp').outputs.functionNameFgtAsHandler.value]"
                    },
                    "FunctionNameLicenseHandler": {
                        "value": "[reference('CreateFunctionApp').outputs.functionNameLicenseHandler.value]"
                    },
                    "InstanceType": {
                        "value": "[parameters('InstanceType')]"
                    },
                    "LicensingModel": {
                        "value": "[variables('licensingModel')]"
                    },
                    "MaxBYOLInstanceCount": {
                        "value": "[parameters('MaxBYOLInstanceCount')]"
                    },
                    "MaxPAYGInstanceCount": {
                        "value": "[parameters('MaxPAYGInstanceCount')]"
                    },
                    "MinBYOLInstanceCount": {
                        "value": "[parameters('MinBYOLInstanceCount')]"
                    },
                    "MinPAYGInstanceCount": {
                        "value": "[parameters('MinPAYGInstanceCount')]"
                    },
                    "PAYGInstanceCount": {
                        "value": "[parameters('PAYGInstanceCount')]"
                    },
                    "ResourceNamePrefix": {
                        "value": "[parameters('ResourceNamePrefix')]"
                    },
                    "ScaleInThreshold": {
                        "value": "[parameters('ScaleInThreshold')]"
                    },
                    "ScaleOutThreshold": {
                        "value": "[parameters('ScaleOutThreshold')]"
                    },
                    "SinglePlacementGroup": {
                        "value": "[equals(parameters('VMSSPlacementGroups'), 'single')]"
                    },
                    "StorageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    },
                    "SubnetIds": {
                        "value": "[if(variables('ifCreateVNet'), reference('CreateVirtualNetwork').outputs.subnetIds.value, variables('subnetIds').subnetIdsCopyIt)]"
                    },
                    "UniqueResourceNamePrefix": {
                        "value": "[variables('uniqueResourceNamePrefix')]"
                    },
                    "VmImageReferenceFgtBYOL": {
                        "value": "[variables('vmImgReferenceFgtBYOL')]"
                    },
                    "VmImageReferenceFgtPAYG": {
                        "value": "[variables('vmImgReferenceFgtPAYG')]"
                    },
                    "VmssNameBYOL": {
                        "value": "[variables('vmssNameBYOL')]"
                    },
                    "VmssNamePAYG": {
                        "value": "[variables('vmssNamePAYG')]"
                    },
                    "ZoneBalance": {
                        "value": "[parameters('VMSSZoneBalance')]"
                    }
                }
            },
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroup": "[resourceGroup().name]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "UpdateDBAccessRestrictions",
            "dependsOn": [
                "[variables('databaseAccountName')]",
                "CreateVirtualNetwork",
                "CreateFunctionApp",
                "UpdateVirtualNetwork"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/fortinet/fortigate-autoscale-azure/main/templates/link_template.database.access_restriction.json"
                },
                "parameters": {
                    "AllowAccessFromSubnetIds": {
                        "value": "[createArray(if(variables('ifCreateVNet'), reference('CreateVirtualNetwork').outputs.subnet1Id.value, variables('subnet1').id))]"
                    },
                    "CommaSeparatedIPAddressString": {
                        "value": "[concat(parameters('AccessRestrictionIPRange'), if(empty(parameters('AccessRestrictionIPRange')), '', ','), reference('CreateFunctionApp').outputs.functionAppPossibleOutboundIpAddresses.value)]"
                    },
                    "DatabaseAccountName": {
                        "value": "[variables('databaseAccountName')]"
                    }
                }
            },
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroup": "[resourceGroup().name]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2018-05-01",
            "name": "SetupFunctionApp",
            "dependsOn": [
                "[variables('databaseAccountName')]",
                "CreateVirtualNetwork",
                "CreateFunctionApp",
                "FortiAnalyzerIntegrationResources",
                "UpdateVirtualNetwork"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "https://raw.githubusercontent.com/fortinet/fortigate-autoscale-azure/main/templates/link_template.function_app.setup.json"
                },
                "parameters": {
                    "AdminPortNumber": {
                        "value": "[variables('adminPortNumber')]"
                    },
                    "AllowAccessFromIPAddresses": {
                        "value": "[if(empty(parameters('AccessRestrictionIPRange')), createArray(), split(parameters('AccessRestrictionIPRange'), ','))]"
                    },
                    "AllowAccessFromSubnetIds": {
                        "value": "[createArray(if(variables('ifCreateVNet'), reference('CreateVirtualNetwork').outputs.subnet1Id.value, variables('subnet1').id))]"
                    },
                    "BYOLInstanceCount": {
                        "value": "[parameters('BYOLInstanceCount')]"
                    },
                    "DatabaseAccountName": {
                        "value": "[variables('databaseAccountName')]"
                    },
                    "DatabaseName": {
                        "value": "[variables('databaseName')]"
                    },
                    "FortiAnalyzerIntegrationOptions": {
                        "value": "[parameters('FortiAnalyzerIntegrationOptions')]"
                    },
                    "FortiAnalyzerPublicIp": {
                        "value": "[if(variables('enableFortiAnalyzer'), reference('FortiAnalyzerIntegrationResources').outputs.fazPublicIp.value, '')]"
                    },
                    "FortiGatePSKSecret": {
                        "value": "[parameters('FortiGatePSKSecret')]"
                    },
                    "FunctionAppInsightName": {
                        "value": "[reference('CreateFunctionApp').outputs.functionAppInsightName.value]"
                    },
                    "FunctionAppName": {
                        "value": "[variables('functionAppName')]"
                    },
                    "FunctionAppResourceGroupName": {
                        "value": "[resourceGroup().name]"
                    },
                    "FunctionNameFazAuthHandler": {
                        "value": "[reference('CreateFunctionApp').outputs.functionNameFazAuthHandler.value]"
                    },
                    "FunctionNameFgtAsHandler": {
                        "value": "[reference('CreateFunctionApp').outputs.functionNameFgtAsHandler.value]"
                    },
                    "HeartBeatDelayAllowance": {
                        "value": "[parameters('HeartBeatDelayAllowance')]"
                    },
                    "HeartBeatInterval": {
                        "value": "[parameters('HeartBeatInterval')]"
                    },
                    "HeartBeatLossCount": {
                        "value": "[parameters('HeartBeatLossCount')]"
                    },
                    "KeyVaultName": {
                        "value": "[variables('keyVaultName')]"
                    },
                    "LicenseFileDirectory": {
                        "value": "[variables('licenseFileDirectory')]"
                    },
                    "MaxBYOLInstanceCount": {
                        "value": "[parameters('MaxBYOLInstanceCount')]"
                    },
                    "MaxPAYGInstanceCount": {
                        "value": "[parameters('MaxPAYGInstanceCount')]"
                    },
                    "MinBYOLInstanceCount": {
                        "value": "[parameters('MinBYOLInstanceCount')]"
                    },
                    "PAYGInstanceCount": {
                        "value": "[parameters('PAYGInstanceCount')]"
                    },
                    "PackageResURL": {
                        "value": "[parameters('PackageResURL')]"
                    },
                    "PrimaryElectionTimeout": {
                        "value": "[parameters('PrimaryElectionTimeout')]"
                    },
                    "ScaleSetNameBYOL": {
                        "value": "[variables('vmssNameBYOL')]"
                    },
                    "ScaleSetNamePAYG": {
                        "value": "[variables('vmssNamePAYG')]"
                    },
                    "ScaleSetNamePrimary": {
                        "value": "[variables('vmssNamePrimary')]"
                    },
                    "ServicePrincipalAppID": {
                        "value": "[parameters('ServicePrincipalAppID')]"
                    },
                    "ServicePrincipalAppSecret": {
                        "value": "[parameters('ServicePrincipalAppSecret')]"
                    },
                    "StorageAccountName": {
                        "value": "[variables('storageAccountName')]"
                    },
                    "TrafficPortNumber": {
                        "value": "[variables('trafficPortNumber')]"
                    },
                    "UniqueResourceNamePrefix": {
                        "value": "[variables('uniqueResourceNamePrefix')]"
                    },
                    "VnetAddressSpace": {
                        "value": "[parameters('VnetAddressSpace')]"
                    },
                    "VnetName": {
                        "value": "[variables('vNetName')]"
                    },
                    "VmssResourceGroupName": {
                        "value": "[resourceGroup().name]"
                    }
                }
            },
            "subscriptionId": "[subscription().subscriptionId]",
            "resourceGroup": "[resourceGroup().name]"
        }
    ],
    "outputs": {
        "cmdDeleteAll": {
            "type": "String",
            "value": "[concat('az account set -s ', subscription().subscriptionId, ';', reference('CreateVirtualMachineScaleSet').outputs.cmdDeleteAll.value, reference('CreateFunctionApp').outputs.cmdDeleteAll.value, reference('CreateDatabase').outputs.cmdDeleteAll.value, if(variables('enableFortiAnalyzer'), reference('FortiAnalyzerIntegrationResources').outputs.cmdDeleteAll.value, ''), reference('CreateLoadBalancers').outputs.cmdDeleteAll.value, if(variables('ifCreateVNet'), reference('CreateVirtualNetwork').outputs.cmdDeleteAll.value, ''), variables('cmdDeleteKeyVault'), variables('cmdDeleteDatabaseAccount'), variables('cmdDeleteStorageAccount'))]"
        },
        "cmdDeleteAllExceptVNet": {
            "type": "String",
            "value": "[concat('az account set -s ', subscription().subscriptionId, ';', reference('CreateVirtualMachineScaleSet').outputs.cmdDeleteAll.value, reference('CreateFunctionApp').outputs.cmdDeleteAll.value, reference('CreateDatabase').outputs.cmdDeleteAll.value, if(variables('enableFortiAnalyzer'), reference('FortiAnalyzerIntegrationResources').outputs.cmdDeleteAll.value, ''), reference('CreateLoadBalancers').outputs.cmdDeleteAll.value, variables('cmdDeleteKeyVault'), variables('cmdDeleteDatabaseAccount'), variables('cmdDeleteStorageAccount'))]"
        }
    }
}
